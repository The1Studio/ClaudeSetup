{
  "hooks": {
    "pre-commit": {
      "enabled": true,
      "commands": [
        {
          "name": "lint-check",
          "command": "npm run lint",
          "condition": "package.json",
          "continueOnError": false
        },
        {
          "name": "type-check",
          "command": "npm run typecheck",
          "condition": "tsconfig.json",
          "continueOnError": false
        },
        {
          "name": "format-check",
          "command": "npm run format:check",
          "condition": "package.json",
          "continueOnError": false
        },
        {
          "name": "test-check",
          "command": "npm test",
          "condition": "package.json && jest.config",
          "continueOnError": false
        }
      ]
    },
    "post-commit": {
      "enabled": false,
      "commands": []
    },
    "pre-push": {
      "enabled": true,
      "commands": [
        {
          "name": "test-all",
          "command": "npm run test:all",
          "condition": "package.json",
          "continueOnError": false
        },
        {
          "name": "build-check",
          "command": "npm run build",
          "condition": "package.json",
          "continueOnError": false
        }
      ]
    },
    "pre-edit": {
      "enabled": true,
      "commands": [
        {
          "name": "backup-file",
          "command": "cp ${FILE} ${FILE}.bak",
          "condition": "always",
          "continueOnError": true
        }
      ]
    },
    "post-edit": {
      "enabled": true,
      "commands": [
        {
          "name": "format-file",
          "command": "prettier --write ${FILE}",
          "condition": "*.js || *.ts || *.jsx || *.tsx",
          "continueOnError": true
        },
        {
          "name": "lint-file",
          "command": "eslint --fix ${FILE}",
          "condition": "*.js || *.ts || *.jsx || *.tsx",
          "continueOnError": true
        }
      ]
    },
    "user-prompt-submit": {
      "enabled": true,
      "commands": [
        {
          "name": "check-secrets",
          "command": "echo '${PROMPT}' | grep -E '(api[_-]?key|password|secret|token)' && echo 'Warning: Potential sensitive information detected'",
          "condition": "always",
          "continueOnError": true
        }
      ]
    },
    "task-start": {
      "enabled": true,
      "commands": [
        {
          "name": "git-status",
          "command": "git status --short",
          "condition": ".git",
          "continueOnError": true
        }
      ]
    },
    "task-complete": {
      "enabled": true,
      "commands": [
        {
          "name": "git-diff",
          "command": "git diff --stat",
          "condition": ".git",
          "continueOnError": true
        }
      ]
    }
  },
  "custom_hooks": {
    "unity-build": {
      "description": "Build Unity project before commit",
      "enabled": false,
      "trigger": "pre-commit",
      "commands": [
        {
          "name": "unity-build",
          "command": "Unity -batchmode -quit -projectPath . -buildTarget Android",
          "condition": "Assets/ && ProjectSettings/",
          "continueOnError": false
        }
      ]
    },
    "cocos-compile": {
      "description": "Compile Cocos project",
      "enabled": false,
      "trigger": "pre-push",
      "commands": [
        {
          "name": "cocos-compile",
          "command": "cocos compile -p web-mobile",
          "condition": "project.json",
          "continueOnError": false
        }
      ]
    },
    "database-backup": {
      "description": "Backup database before migrations",
      "enabled": false,
      "trigger": "custom",
      "commands": [
        {
          "name": "db-backup",
          "command": "pg_dump -h localhost -U user -d dbname > backup_$(date +%Y%m%d_%H%M%S).sql",
          "condition": "migrations/",
          "continueOnError": false
        }
      ]
    }
  },
  "configuration": {
    "timeout": 30000,
    "parallel": false,
    "silent": false,
    "skipOnCI": true,
    "logFile": "~/.claude/logs/hooks.log",
    "environment": {
      "NODE_ENV": "development",
      "CLAUDE_HOOK": "true"
    }
  }
}